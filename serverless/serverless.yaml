service:
  name: accountant-sync

package:
  individually: false
  exclude:
    - node_modules/**

plugins:
  - serverless-dotenv-plugin
  - serverless-appsync-plugin
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-offline
 
resources: ${file(serverless/resources.yaml)}

provider: 
  name: aws
  runtime: nodejs10.x
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  memorySize: 128 
  timeout: 30
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:* 
      Resource: 
        Fn::Join:
          - ':'
          - - arn
            - aws
            - dynamodb
            - ${self:custom.region}
            - !Ref AWS::AccountId
            - table/${self:custom.db.accsynctablename}
    - Effect: Allow
      Action: 
        - dynamodb:* 
      Resource: 
        Fn::Join:
          - ':'
          - - arn
            - aws
            - dynamodb
            - ${self:custom.region}
            - !Ref AWS::AccountId
            - table/${self:custom.db.clientstablename}
    - Effect: Allow
      Action: 
        - dynamodb:* 
      Resource: 
        Fn::Join:
          - ':'
          - - arn
            - aws
            - dynamodb
            - ${self:custom.region}
            - !Ref AWS::AccountId
            - table/${self:custom.db.reportstablename}
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        Fn::Join:
          - ':'
          - - arn
            - aws
            - dynamodb
            - ${self:custom.region}
            - !Ref AWS::AccountId
            - table/${self:custom.db.accountstablename}    
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        Fn::Join:
          - ':'
          - - arn
            - aws
            - dynamodb
            - ${self:custom.region}
            - !Ref AWS::AccountId
            - table/${self:custom.db.accountstablename}/index/*          
    - Effect: Allow
      Action: 
        - dynamodb:* 
      Resource: 
        Fn::Join:
          - ':'
          - - arn
            - aws
            - dynamodb
            - ${self:custom.region}
            - !Ref AWS::AccountId
            - table/${self:custom.db.taxcodestablename}                             
    - Effect: Allow
      Action:
        - appsync:GraphQL
      Resource: 
        - Fn::Join:
            - '/'
            - - !Ref GraphQlApi
              - '*'
    - Effect: Allow 
      Action:
        - s3:*
      Resource:
        Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - !Ref S3Bucket
            - "/*"                                
    - Effect: Allow
      Action:
        - events:PutEvent
      Resource: 
        Fn::Join:
          - ':'
          - - arn
            - aws
            - events
            - ${self:custom.region}
            - !Ref AWS::AccountId
            - event-bus/accountant-sync
  environment: 
    usersTable: ${self:custom.db.accsynctablename}
    clientsTable: ${self:custom.db.clientstablename}
    reportsTable: ${self:custom.db.reportstablename}
    accountsTable: ${self:custom.db.accountstablename}
    clientSecret: ${self:custom.clientsecret}
    clientId: ${self:custom.clientid}
    environment: ${self:custom.env}
    redirectUri: ${self:custom.redirecturi}
    intuitAPI: ${self:custom.intuituri}
    reportBucket: ${self:custom.reportBucketName}
    bucketLink: ${self:custom.bucketLink}
  variableSyntax: "\\${((?!AWS|SecretName)[ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)\\*\\?]+?)}"

functions:
  AddUserToAirtable:
   handler: src/lambdas/addUserToAirtable.handler
   events:
     - eventBridge:
        eventBus: accountant-sync
        pattern:
           source:
             - accountantsync.user.create
  UploadReportToS3:
    handler: src/lambdas/uploadToS3.handler
    events:
      - http:
          path: download/{id}
          method: get
          cors: true
          authorizer: ${self:custom.authorizer}
  SignUp:
   handler: src/lambdas/signUp.handler
   events:
    - http:
        path: signUp/
        method: post
        cors: true
        authorizer: ${self:custom.authorizer}

  RefreshTokens:
   handler: src/lambdas/refreshToken.handler
   events:
    - http:
        path: refresh-token/
        method: post
        cors: true
        authorizer: ${self:custom.authorizer}
   
  GetReportFromIntuit:
    handler: src/lambdas/storeReportToDb.handler
    events:
      - http:
          path: report-settings/{realmId}
          method: post
          cors: true
          authorizer: ${self:custom.authorizer}    
  DeleteClient:
    handler: src/lambdas/deleteClient.handler
    events:
      - http:
          path: clients/{clientId}
          method: delete
          cors: true
          authorizer: ${self:custom.authorizer} 
  ForceSync:
    handler: src/lambdas/forceReportSync.handler
    events:
      - http:
          path: reports/{reportId}/sync
          method: post
          cors: true
          authorizer: ${self:custom.authorizer} 

  StoreIntuitTokens:
   handler: src/lambdas/storeTokens.handler
   events:
     - http:
         path: tokens/
         method: post
         cors: true
         authorizer: ${self:custom.authorizer}

  IntuitSignInRedirect:       
   handler: src/lambdas/intuitSignInRedirect.handler
   events:
     - http:
         path: intuitSignIn/
         method: get
         cors: true
         authorizer: ${self:custom.authorizer}

custom: 
  stage: ${opt:stage, env:STAGE}
  region: ${opt:region, 'us-east-1'}
  db: 
    accsynctablename: ${opt:stage, env:STAGE}_users_table
    clientstablename: ${opt:stage, env:STAGE}_clients_table
    reportstablename: ${opt:stage, env:STAGE}_reports_table
    taxcodestablename: ${opt:stage, env:STAGE}_taxcodes_table
    accountstablename: ${opt:stage, env:STAGE}_accounts_table
  clientsecret: ${env:CLIENT_SECRET}
  clientid: ${env:CLIENT_ID}
  env: ${env:ENVIRONMENT}
  redirecturi: ${env:REDIRECT_URI}
  intuituri: ${env:INTUIT_API_URI}
  reportBucketName: ${env:REPORT_BUCKET_NAME}
  bucketLink: ${env:BUCKET_LINK}
  authorizer: 
    type: COGNITO_USER_POOLS
    authorizerId:
      Ref: ApiGatewayAuthorizer
  webpack:
    webpackConfig: webpack.config.ts
    includeModules: true
    packager: npm
  appSync:
    name: ${self:service.name}
    authenticationType: API_KEY
    mappingTemplates:
      - dataSource: Clients
        type: Query
        field: getClients
        request: 'scanClient-request-mapping-template.vtl'
        response: 'array-response-mapping-template.vtl'
      - dataSource: Accounts
        type: Query
        field: getAccountsByReportId
        request: 'scanAccount-request-mapping-template.vtl'
        response: 'array-response-mapping-template.vtl'    
      - dataSource: Reports
        type: Query
        field: getReport
        request: 'getReport-request-mapping-template.vtl'
        response: 'common-response-mapping-template.vtl'
      - dataSource: Reports
        type: Query
        field: getReportByClientId
        request: 'scanReport-request-mapping-template.vtl'
        response: 'array-response-mapping-template.vtl'
      - dataSource: Reports
        type: Query
        field: getReportsByCognitoId
        request: 'scanReport-cognitoid-request-mapping-template.vtl'
        reponse: 'array-response-mapping-template.vtl'
      - dataSource: Clients
        type: Query
        field: getClient
        request: 'getReport-request-mapping-template.vtl'
        response: 'common-response-mapping-template.vtl'
      - dataSource: TaxCodes
        type: Query
        field: getTaxCodes
        request: 'scanTaxCodes-request-mapping-template.vtl'
        response: 'array-response-mapping-template.vtl'   
      - dataSource: Accounts
        type: Mutation
        field: updateAccount
        request: 'updateAccount-request-mapping-template.vtl'
        response: 'common-response-mapping-template.vtl'
      - dataSource: Reports
        type: Mutation
        field: updateReport
        request: 'updateReport-request-mapping-template.vtl'
        response: 'common-response-mapping-template.vtl'
    dataSources:
      - type: AMAZON_DYNAMODB
        name: Clients
        description: Clients table
        config:
          tableName: ${self:custom.db.clientstablename}
      - type: AMAZON_DYNAMODB
        name: Reports
        description: Reports table
        config:
          tableName: ${self:custom.db.reportstablename}
      - type: AMAZON_DYNAMODB
        name: TaxCodes
        description: Tax codes table
        config:
          tableName: ${self:custom.db.taxcodestablename}
      - type: AMAZON_DYNAMODB
        name: Accounts
        description: Accounts table
        config:
          tableName: ${self:custom.db.accountstablename}                 