service:
  name: account-sync

package:
  individually: false
  exclude:
    - node_modules/**

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-iam-roles-per-function

resources: ${file(serverless/resources.yaml)}

provider: 
  name: aws
  runtime: nodejs10.x
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  memorySize: 512
  timeout: 30
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:* 
      Resource: 
        Fn::Join:
          - ':'
          - - arn
            - aws
            - dynamodb
            - ${self:custom.region}
            - !Ref AWS::AccountId
            - table/${self:custom.db.accsynctablename}
    - Effect: Allow
      Action: 
        - dynamodb:* 
      Resource: 
        Fn::Join:
          - ':'
          - - arn
            - aws
            - dynamodb
            - ${self:custom.region}
            - !Ref AWS::AccountId
            - table/${self:custom.db.clientstablename}        

  environment: 
    usersTable: ${self:custom.db.accsynctablename}
    clientsTable: ${self:custom.db.clientstablename}
    clientSecret: ${self:custom.clientsecret}
    clientId: ${self:custom.clientid}
  variableSyntax: "\\${((?!AWS|SecretName)[ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)\\*\\?]+?)}"

functions:
  SignUp:
   handler: src/lambdas/signUp.handler
   events:
    - http:
        path: signUp/
        method: post
        cors: true
        authorizer: ${self:custom.authorizer}

  RefreshTokens:
    handler: src/lambdas/refreshToken.handler
    events:
      - schedule: rate(1 hour)  

  StoreIntuitTokens:
   handler: src/lambdas/storeTokens.handler
   events:
     - http:
         path: tokens/
         method: post
         cors: true
         authorizer: ${self:custom.authorizer}

  IntuitSignInRedirect:       
   handler: src/lambdas/intuitSignInRedirect.handler
   events:
     - http:
         path: intuitSignIn/
         method: get
         cors: true
         authorizer: ${self:custom.authorizer}

custom: 
  stage: ${opt:stage, env:STAGE}
  region: ${opt:region, 'ap-southeast-2'}
  db: 
    accsynctablename: users_table
    clientstablename: clients_table
  clientsecret: ${env:CLIENT_SECRET}
  clientid: ${env:CLIENT_ID}
  authorizer: 
    type: COGNITO_USER_POOLS
    authorizerId:
      Ref: ApiGatewayAuthorizer
  webpack:
    webpackConfig: webpack.config.ts
    includeModules: true
    packager: npm